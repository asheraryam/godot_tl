diff --git a/scene/gui/line_edit.cpp b/scene/gui/line_edit.cpp
index 8f5f6beac3..dea9a9bf2f 100644
--- a/scene/gui/line_edit.cpp
+++ b/scene/gui/line_edit.cpp
@@ -28,6 +28,8 @@
 /* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
 /*************************************************************************/
 
+#if 0
+
 #include "line_edit.h"
 
 #include "core/message_queue.h"
@@ -1863,3 +1865,5 @@ LineEdit::LineEdit() {
 
 LineEdit::~LineEdit() {
 }
+
+#endif
diff --git a/scene/gui/line_edit.h b/scene/gui/line_edit.h
index cf597d11b6..98f63cba49 100644
--- a/scene/gui/line_edit.h
+++ b/scene/gui/line_edit.h
@@ -31,215 +31,28 @@
 #ifndef LINE_EDIT_H
 #define LINE_EDIT_H
 
-#include "scene/gui/control.h"
-#include "scene/gui/popup_menu.h"
+#include "modules/godot_tl/src/controls/tl_line_edit.hpp"
+#include "modules/godot_tl/src/resources/tl_gd_font_wrapper.hpp"
 
-class LineEdit : public Control {
-
-	GDCLASS(LineEdit, Control);
-
-public:
-	enum Align {
-
-		ALIGN_LEFT,
-		ALIGN_CENTER,
-		ALIGN_RIGHT,
-		ALIGN_FILL
-	};
-
-	enum MenuItems {
-		MENU_CUT,
-		MENU_COPY,
-		MENU_PASTE,
-		MENU_CLEAR,
-		MENU_SELECT_ALL,
-		MENU_UNDO,
-		MENU_REDO,
-		MENU_MAX
-
-	};
-
-private:
-	Align align;
-
-	bool editable;
-	bool pass;
-	bool text_changed_dirty;
-
-	String undo_text;
-	String text;
-	String placeholder;
-	String placeholder_translated;
-	String secret_character;
-	float placeholder_alpha;
-	String ime_text;
-	Point2 ime_selection;
-
-	bool selecting_enabled;
-
-	bool context_menu_enabled;
-	PopupMenu *menu;
-
-	int cursor_pos;
-	int window_pos;
-	int max_length; // 0 for no maximum.
-
-	int cached_width;
-	int cached_placeholder_width;
-
-	bool clear_button_enabled;
-
-	bool shortcut_keys_enabled;
-
-	Ref<Texture> right_icon;
-
-	struct Selection {
-
-		int begin;
-		int end;
-		int cursor_start;
-		bool enabled;
-		bool creating;
-		bool doubleclick;
-		bool drag_attempt;
-	} selection;
-
-	struct TextOperation {
-		int cursor_pos;
-		int window_pos;
-		int cached_width;
-		String text;
-	};
-	List<TextOperation> undo_stack;
-	List<TextOperation>::Element *undo_stack_pos;
-
-	struct ClearButtonStatus {
-		bool press_attempt;
-		bool pressing_inside;
-	} clear_button_status;
-
-	bool _is_over_clear_button(const Point2 &p_pos) const;
-
-	void _clear_undo_stack();
-	void _clear_redo();
-	void _create_undo_state();
-
-	void _generate_context_menu();
-
-	Timer *caret_blink_timer;
-
-	void _text_changed();
-	void _emit_text_change();
-	bool expand_to_text_length;
-
-	void update_placeholder_width();
-
-	bool caret_blink_enabled;
-	bool draw_caret;
-	bool window_has_focus;
-
-	void shift_selection_check_pre(bool);
-	void shift_selection_check_post(bool);
-
-	void selection_fill_at_cursor();
-	void set_window_pos(int p_pos);
-
-	void set_cursor_at_pixel_pos(int p_x);
-	int get_cursor_pixel_pos();
-
-	void _reset_caret_blink_timer();
-	void _toggle_draw_caret();
-
-	void clear_internal();
-	void changed_internal();
-
-	void _editor_settings_changed();
-
-	void _gui_input(Ref<InputEvent> p_event);
-	void _notification(int p_what);
-
-protected:
-	static void _bind_methods();
+class LineEdit : public TLLineEdit {
+	GDCLASS(LineEdit, TLLineEdit);
 
 public:
-	void set_align(Align p_align);
-	Align get_align() const;
-
-	virtual Variant get_drag_data(const Point2 &p_point);
-	virtual bool can_drop_data(const Point2 &p_point, const Variant &p_data) const;
-	virtual void drop_data(const Point2 &p_point, const Variant &p_data);
-
-	virtual CursorShape get_cursor_shape(const Point2 &p_pos) const;
-
-	void menu_option(int p_option);
-	void set_context_menu_enabled(bool p_enable);
-	bool is_context_menu_enabled();
-	PopupMenu *get_menu() const;
-
-	void select(int p_from = 0, int p_to = -1);
-	void select_all();
-	void selection_delete();
-	void deselect();
-
-	void delete_char();
-	void delete_text(int p_from_column, int p_to_column);
-	void set_text(String p_text);
-	String get_text() const;
-	void set_placeholder(String p_text);
-	String get_placeholder() const;
-	void set_placeholder_alpha(float p_alpha);
-	float get_placeholder_alpha() const;
-	void set_cursor_position(int p_pos);
-	int get_cursor_position() const;
-	void set_max_length(int p_max_length);
-	int get_max_length() const;
-	void append_at_cursor(String p_text);
-	void clear();
-
-	bool cursor_get_blink_enabled() const;
-	void cursor_set_blink_enabled(const bool p_enabled);
-
-	float cursor_get_blink_speed() const;
-	void cursor_set_blink_speed(const float p_speed);
-
-	void copy_text();
-	void cut_text();
-	void paste_text();
-	void undo();
-	void redo();
-
-	void set_editable(bool p_editable);
-	bool is_editable() const;
-
-	void set_secret(bool p_secret);
-	bool is_secret() const;
-
-	void set_secret_character(const String &p_string);
-	String get_secret_character() const;
-
-	virtual Size2 get_minimum_size() const;
-
-	void set_expand_to_text_length(bool p_enabled);
-	bool get_expand_to_text_length() const;
-
-	void set_clear_button_enabled(bool p_enabled);
-	bool is_clear_button_enabled() const;
-
-	void set_shortcut_keys_enabled(bool p_enabled);
-	bool is_shortcut_keys_enabled() const;
-
-	void set_selecting_enabled(bool p_enabled);
-	bool is_selecting_enabled() const;
-
-	void set_right_icon(const Ref<Texture> &p_icon);
-	Ref<Texture> get_right_icon();
-
-	virtual bool is_text_field() const;
-	LineEdit();
-	~LineEdit();
+	void _notification(int p_what) {
+		if ((p_what == NOTIFICATION_THEME_CHANGED) || (p_what == NOTIFICATION_POST_ENTER_TREE)) {
+			Ref<Font> font_w = get_font("font");
+			TLGDFontWrapper *fw_ref = cast_to<TLGDFontWrapper>(*font_w);
+			if (fw_ref) {
+				set_base_font(fw_ref->get_base_font());
+				set_base_font_style(fw_ref->get_base_font_style());
+				set_base_font_size(fw_ref->get_base_font_size());
+			}
+		}
+	}
+
+	LineEdit() {
+		_init();
+	}
 };
 
-VARIANT_ENUM_CAST(LineEdit::Align);
-VARIANT_ENUM_CAST(LineEdit::MenuItems);
-
 #endif
diff --git a/scene/gui/spin_box.cpp b/scene/gui/spin_box.cpp
index d5da35955c..758c8cda82 100644
--- a/scene/gui/spin_box.cpp
+++ b/scene/gui/spin_box.cpp
@@ -218,12 +218,12 @@ void SpinBox::_notification(int p_what) {
 	}
 }
 
-void SpinBox::set_align(LineEdit::Align p_align) {
+void SpinBox::set_align(int p_align) {
 
 	line_edit->set_align(p_align);
 }
 
-LineEdit::Align SpinBox::get_align() const {
+int SpinBox::get_align() const {
 
 	return line_edit->get_align();
 }
diff --git a/scene/gui/spin_box.h b/scene/gui/spin_box.h
index 13ba168ef3..46fa6bd7ab 100644
--- a/scene/gui/spin_box.h
+++ b/scene/gui/spin_box.h
@@ -76,8 +76,8 @@ public:
 
 	virtual Size2 get_minimum_size() const;
 
-	void set_align(LineEdit::Align p_align);
-	LineEdit::Align get_align() const;
+	void set_align(int p_align);
+	int get_align() const;
 
 	void set_editable(bool p_editable);
 	bool is_editable() const;
