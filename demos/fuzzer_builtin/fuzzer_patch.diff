diff --git a/core/io/logger.cpp b/core/io/logger.cpp
index 9175f6a..ec01cf9 100644
--- a/core/io/logger.cpp
+++ b/core/io/logger.cpp
@@ -50,7 +50,7 @@
 #endif
 
 bool Logger::should_log(bool p_err) {
-	return (!p_err || _print_error_enabled) && (p_err || _print_line_enabled);
+	return false;//(!p_err || _print_error_enabled) && (p_err || _print_line_enabled);
 }
 
 void Logger::log_error(const char *p_function, const char *p_file, int p_line, const char *p_code, const char *p_rationale, ErrorType p_type) {
diff --git a/core/ustring.cpp b/core/ustring.cpp
index f029ae4..0567acc 100644
--- a/core/ustring.cpp
+++ b/core/ustring.cpp
@@ -1375,7 +1375,7 @@ String String::utf8(const char *p_utf8, int p_len) {
 
 bool String::parse_utf8(const char *p_utf8, int p_len) {
 
-#define _UNICERROR(m_err) print_line("Unicode error: " + String(m_err));
+//#define _UNICERROR(m_err) print_line("Unicode error: " + String(m_err));
 
 	if (!p_utf8)
 		return true;
@@ -1422,13 +1422,13 @@ bool String::parse_utf8(const char *p_utf8, int p_len) {
 				else if ((c & 0xFE) == 0xFC)
 					skip = 5;
 				else {
-					_UNICERROR("invalid skip");
+					//_UNICERROR("invalid skip");
 					return true; //invalid utf8
 				}
 
 				if (skip == 1 && (c & 0x1E) == 0) {
 					//printf("overlong rejected\n");
-					_UNICERROR("overlong rejected");
+					//_UNICERROR("overlong rejected");
 					return true; //reject overlong
 				}
 
@@ -1444,7 +1444,7 @@ bool String::parse_utf8(const char *p_utf8, int p_len) {
 		}
 
 		if (skip) {
-			_UNICERROR("no space left");
+			//_UNICERROR("no space left");
 			return true; //not enough spac
 		}
 	}
@@ -1476,19 +1476,19 @@ bool String::parse_utf8(const char *p_utf8, int p_len) {
 		else if ((*p_utf8 & 0xFE) == 0xFC)
 			len = 6;
 		else {
-			_UNICERROR("invalid len");
+			//_UNICERROR("invalid len");
 
 			return true; //invalid UTF8
 		}
 
 		if (len > cstr_size) {
-			_UNICERROR("no space left");
+			//_UNICERROR("no space left");
 			return true; //not enough space
 		}
 
 		if (len == 2 && (*p_utf8 & 0x1E) == 0) {
 			//printf("overlong rejected\n");
-			_UNICERROR("no space left");
+			//_UNICERROR("no space left");
 			return true; //reject overlong
 		}
 
@@ -1505,11 +1505,11 @@ bool String::parse_utf8(const char *p_utf8, int p_len) {
 			for (int i = 1; i < len; i++) {
 
 				if ((p_utf8[i] & 0xC0) != 0x80) {
-					_UNICERROR("invalid utf8");
+					//_UNICERROR("invalid utf8");
 					return true; //invalid utf8
 				}
 				if (unichar == 0 && i == 2 && ((p_utf8[i] & 0x7F) >> (7 - len)) == 0) {
-					_UNICERROR("invalid utf8 overlong");
+					//_UNICERROR("invalid utf8 overlong");
 					return true; //no overlong
 				}
 				unichar = (unichar << 6) | (p_utf8[i] & 0x3F);
